In this lesson, we will take the Jenkins image we built in the previous lesson, and deploy a Docker container using Terraform.

Edit main.tf:

vi main.tf
main.tf contents:

# Jenkins Volume
resource "docker_volume" "jenkins_volume" {
  name = "jenkins_data"
}

# Start the Jenkins Container
resource "docker_container" "jenkins_container" {
  name  = "jenkins"
  image = "jenkins:terraform"
  ports {
    internal = "8080"
    external = "8080"
  }

  volumes {
    volume_name    = "${docker_volume.jenkins_volume.name}"
    container_path = "/var/jenkins_home"
  }

  volumes {
    host_path      = "/var/run/docker.sock"
    container_path = "/var/run/docker.sock"
  }
}
Initialize Terraform:

terraform init
Plan the deployment:

terraform plan -out=tfplan
Deploy Jenkins:

terraform apply tfplan
Get the Admin password:

docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword

-------------------------------------------------

console Output:-



ubuntu@ip-172-31-38-20:~/jenkins$ vi main.tf
ubuntu@ip-172-31-38-20:~/jenkins$ terraform destroy
docker_volume.jenkins_volume: Refreshing state... [id=jenkins_data]
docker_container.jenkins_container: Refreshing state... [id=2dc4b86c15224e1d2570b0aeb0b3a5477f5db206567149649abfc6081c7f57d6]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # docker_container.jenkins_container will be destroyed
  - resource "docker_container" "jenkins_container" {
      - attach           = false -> null
      - gateway          = "172.17.0.1" -> null
      - id               = "2dc4b86c15224e1d2570b0aeb0b3a5477f5db206567149649abfc6081c7f57d6" -> null
      - image            = "jenkins:terraform" -> null
      - ip_address       = "172.17.0.2" -> null
      - ip_prefix_length = 16 -> null
      - log_driver       = "json-file" -> null
      - logs             = false -> null
      - must_run         = true -> null
      - name             = "jenkins" -> null
      - network_data     = [
          - {
              - gateway          = "172.17.0.1"
              - ip_address       = "172.17.0.2"
              - ip_prefix_length = 16
              - network_name     = "bridge"
            },
        ] -> null
      - read_only        = false -> null
      - restart          = "no" -> null
      - rm               = false -> null
      - start            = true -> null

      - ports {
          - external = 8083 -> null
          - internal = 8083 -> null
          - ip       = "0.0.0.0" -> null
          - protocol = "tcp" -> null
        }

      - volumes {
          - container_path = "/var/jenkins_home" -> null
          - read_only      = false -> null
          - volume_name    = "jenkins_data" -> null
        }
      - volumes {
          - container_path = "/var/run/docker.sock" -> null
          - host_path      = "/var/run/docker.sock" -> null
          - read_only      = false -> null
        }
    }

  # docker_volume.jenkins_volume will be destroyed
  - resource "docker_volume" "jenkins_volume" {
      - driver      = "local" -> null
      - driver_opts = {} -> null
      - id          = "jenkins_data" -> null
      - labels      = {} -> null
      - mountpoint  = "/var/lib/docker/volumes/jenkins_data/_data" -> null
      - name        = "jenkins_data" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_container.jenkins_container: Destroying... [id=2dc4b86c15224e1d2570b0aeb0b3a5477f5db206567149649abfc6081c7f57d6]
docker_container.jenkins_container: Destruction complete after 0s
docker_volume.jenkins_volume: Destroying... [id=jenkins_data]
docker_volume.jenkins_volume: Destruction complete after 2s

Destroy complete! Resources: 2 destroyed.
ubuntu@ip-172-31-38-20:~/jenkins$ rm tfplan
ubuntu@ip-172-31-38-20:~/jenkins$ terraform init

Initializing the backend...

Initializing provider plugins...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.6"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ip-172-31-38-20:~/jenkins$ terraform plan -out=tfplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.jenkins_container will be created
  + resource "docker_container" "jenkins_container" {
      + attach           = false
      + bridge           = (known after apply)
      + container_logs   = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + id               = (known after apply)
      + image            = "jenkins:terraform"
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "jenkins"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + start            = true

      + ports {
          + external = 8083
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }

      + volumes {
          + container_path = "/var/jenkins_home"
          + volume_name    = "jenkins_data"
        }
      + volumes {
          + container_path = "/var/run/docker.sock"
          + host_path      = "/var/run/docker.sock"
        }
    }

  # docker_volume.jenkins_volume will be created
  + resource "docker_volume" "jenkins_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "jenkins_data"
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

ubuntu@ip-172-31-38-20:~/jenkins$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
ubuntu@ip-172-31-38-20:~/jenkins$ terraform apply tfplan
docker_volume.jenkins_volume: Creating...
docker_volume.jenkins_volume: Creation complete after 0s [id=jenkins_data]
docker_container.jenkins_container: Creating...
docker_container.jenkins_container: Creation complete after 1s [id=82724f8f0161d710276d19b5b48858a595a12aff9a2ff522092767294461d38b]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate
ubuntu@ip-172-31-38-20:~/jenkins$ ls
Dockerfile  main.tf  terraform.tfstate  terraform.tfstate.backup  tfplan
ubuntu@ip-172-31-38-20:~/jenkins$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
82724f8f0161        jenkins:terraform   "/sbin/tini -- /usr/…"   6 seconds ago       Up 5 seconds        50000/tcp, 0.0.0.0:8083->8080/tcp   jenkins
ubuntu@ip-172-31-38-20:~/jenkins$ docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
1183e8d82fdb4894b6bec059cde20d14

